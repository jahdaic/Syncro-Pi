{"version":3,"file":"static/js/656.d1afb762.chunk.js","mappings":"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","sources":["components/Confirm.jsx","components/Location.jsx","pages/Speed/Speed.jsx","pages/Speed/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Utility from '../scripts/utility';\n\nimport '../css/modal.css';\n\nconst failureTolerance = 5;\nconst gyroscope = null;\n\nexport const Modal = ({ children, onConfirm, onCancel, ...props }) => (\n\t// useEffect(updatePosition, []);\n\n\t<div id=\"confirm\">\n\t\t<div id=\"confirm-modal\">\n\t\t\t{children}\n\t\t\t<div id=\"confirm-buttons\">\n\t\t\t\t<div id=\"performance-buttons\">\n\t\t\t\t\t<button type=\"button\" onClick={onConfirm}>\n\t\t\t\t\t\tConfirm\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\" onClick={onCancel}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nModal.propTypes = {\n\tchildren: PropTypes.node,\n\tonConfirm: PropTypes.func.isRequired,\n\tonCancel: PropTypes.func.isRequired,\n};\n\nModal.defaultProps = {\n\tchildren: null,\n};\n\nexport default Modal;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport Confirm from './Confirm';\nimport * as Utility from '../scripts/utility';\nimport storeActions from '../store/store.redux';\n\nconst failureTolerance = 3;\nconst validMethods = ['geolocation'];\n\n// if (process.env.REACT_APP_GPSD_SERVER_URL) validMethods.unshift('gpsd');\n\nexport const Location = ({ interval = 1000, ...props }) => {\n\tconst dispatch = useDispatch();\n\tconst [method, setMethod] = useState(validMethods[0]);\n\tconst [failedMethods, setFailedMethods] = useState([]);\n\tconst [permitted, setPermitted] = useState(false);\n\tconst [confirmed, setConfirmed] = useState(true);\n\tconst [failures, setFailures] = useState(0);\n\n\tconst dataFailure = (err, forceNext) => {\n\t\tconsole.log('Failure', method, failures, failureTolerance, forceNext, new Date().toLocaleTimeString());\n\n\t\tsetFailures((currentFailures) => {\n\t\t\tif (currentFailures >= failureTolerance - 1 || forceNext) {\n\t\t\t\tsetMethod((currentMethod) => {\n\t\t\t\t\tconst newMethod = validMethods.find((m) => !failedMethods.includes(m) && m !== currentMethod);\n\n\t\t\t\t\tif (!newMethod) return currentMethod;\n\n\t\t\t\t\tconsole.log(`Changing location method to ${newMethod}`);\n\t\t\t\t\tsetFailedMethods((currentFailedMethods) => [...currentFailedMethods, currentMethod]);\n\t\t\t\t\treturn newMethod;\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(`Failed to get location via ${method}`);\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn currentFailures + 1;\n\t\t\t}\n\n\t\t\treturn currentFailures;\n\t\t});\n\t};\n\n\tconst cleanupGPSData = (response) => ({\n\t\tlatitude: response.lat,\n\t\tlongitude: response.lon,\n\t\taltitude: Utility.metersToFeet(response.alt),\n\t\theading: response.track,\n\t\tclimb: response.climb,\n\t\ttilt: 0,\n\t\tspeed: Utility.mpsToMPH(response.speed),\n\t\taccuracy: Utility.metersToFeet(Math.max(response.epx, response.epy)),\n\t\taltitudeAccuracy: Utility.metersToFeet(response.epv),\n\t\tmethod,\n\t});\n\n\tconst cleanupGeolocationData = (location) => ({\n\t\tlatitude: location.coords.latitude,\n\t\tlongitude: location.coords.longitude,\n\t\taltitude: Utility.metersToFeet(location.coords.altitude),\n\t\theading: location.coords.heading,\n\t\tclimb: 0,\n\t\ttilt: 0,\n\t\tspeed: Utility.mpsToMPH(location.coords.speed),\n\t\taccuracy: Utility.metersToFeet(location.coords.accuracy),\n\t\taltitudeAccuracy: Utility.metersToFeet(location.coords.altitudeAccuracy),\n\t\tmethod,\n\t});\n\n\tconst getDataFromGPSD = () => {\n\t\tfetch(`${process.env.REACT_APP_GPSD_SERVER_URL}/gps`)\n\t\t\t.then((response) => response.json())\n\t\t\t.then(cleanupGPSData)\n\t\t\t.then((data) => dispatch(storeActions.setGPS(data)))\n\t\t\t.then(() => setTimeout(updateLocation, interval, method))\n\t\t\t.catch(dataFailure);\n\t};\n\n\tconst getDataFromGeolocation = () => {\n\t\tif (navigator?.permissions?.query) {\n\t\t\tnavigator.permissions\n\t\t\t\t.query({ name: 'geolocation' })\n\t\t\t\t.then((permission) => {\n\t\t\t\t\tif (permission.state === 'granted' || permission.state === 'prompt') {\n\t\t\t\t\t\tsetPermitted(true);\n\t\t\t\t\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t\t\t\t\t(location) => {\n\t\t\t\t\t\t\t\tdispatch(storeActions.setGPS(cleanupGeolocationData(location)));\n\t\t\t\t\t\t\t\tsetTimeout(updateLocation, interval);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdataFailure,\n\t\t\t\t\t\t\t{ enableHighAccuracy: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetConfirmed(false);\n\t\t\t\t\t\tdataFailure('Geolocation API permission denied by system');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tif (!permitted) setConfirmed(false);\n\t\t\t\t\telse dataFailure(err);\n\t\t\t\t});\n\t\t}\n\t\telse if (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t\t(location) => {\n\t\t\t\t\tdispatch(storeActions.setGPS(cleanupGeolocationData(location)));\n\t\t\t\t\tsetTimeout(updateLocation, interval);\n\t\t\t\t},\n\t\t\t\tdataFailure,\n\t\t\t\t{ enableHighAccuracy: true },\n\t\t\t);\n\t\t}\n\t};\n\n\tconst updateLocation = (currentMethod = method) => {\n\t\tif (currentMethod === 'gpsd') getDataFromGPSD();\n\t\tif (currentMethod === 'geolocation') getDataFromGeolocation();\n\t};\n\n\t// useEffect(() => {\n\t// \tconsole.log(`Setting timeout from ${new Date().toLocaleTimeString()} - ${failures}/${method}/${failedMethods}`);\n\t// \tsetTimeout(() => updateLocation(method), interval)\n\t// }, [failures]);\n\n\tuseEffect(() => setFailures(0), [method]);\n\n\tuseEffect(() => updateLocation(method), []);\n\n\tif (method === 'geolocation' && !permitted && !confirmed)\n\t\treturn (\n\t\t\t<Confirm\n\t\t\t\tonConfirm={() => {\n\t\t\t\t\tsetConfirmed(true);\n\t\t\t\t\tupdateLocation();\n\t\t\t\t}}\n\t\t\t\tonCancel={() => {\n\t\t\t\t\tsetConfirmed(true);\n\t\t\t\t\tdataFailure('Geolocation API permission denied by user', true);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<span className=\"show-unlit\" data-unlit={Utility.fillUnlitLCD(3, 20)}>\n\t\t\t\t\tYou must grant permission to access GPS.\n\t\t\t\t</span>\n\t\t\t</Confirm>\n\t\t);\n\n\treturn null;\n};\n\nLocation.propTypes = {\n\tinterval: PropTypes.number,\n\tonUpdate: PropTypes.func.isRequired,\n};\n\nLocation.defaultProps = {\n\tinterval: 1000,\n};\n\nexport default Location;\n","import React, { useEffect, useState } from 'react';\nimport * as Icon from 'react-bootstrap-icons';\nimport { useSelector } from 'react-redux';\nimport Location from '../../components/Location';\nimport * as Utility from '../../scripts/utility';\nimport { selectGPSState, selectSettingState } from '../../store/store.selectors';\n\nimport '../../css/speed.css';\n\nconst resolution = 100; // 100 milliseconds\n\nexport const Speed = (props) => {\n\tconst settings = useSelector(selectSettingState);\n\tconst gps = useSelector(selectGPSState);\n\tconst [time, setTime] = useState(new Date());\n\tconst [run, setRun] = useState({ start: null, end: null, topSpeed: null, to60: null, times: [], speeds: [] });\n\n\tconst getCurrentSpeed = () => String(Math.floor(gps?.speed || 0)).padStart(3, '0');\n\n\treturn (\n\t\t<div id=\"speed\">\n\t\t\t<div id=\"speed-speed\" className=\"show-unlit\" data-unlit={Utility.generateUnlitLCD(getCurrentSpeed())}>\n\t\t\t\t{getCurrentSpeed()}\n\t\t\t\t<span id=\"speed-units\" className=\"original-font\">\n\t\t\t\t\t{settings.units === 'imperial' ? 'MPH' : 'Km/H'}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Speed;\n","import Speed from './Speed';\n\nexport default Speed;"],"names":["Modal","_ref","children","onConfirm","onCancel","props","_jsx","id","_jsxs","type","onClick","defaultProps","validMethods","Location","interval","dispatch","useDispatch","method","setMethod","useState","failedMethods","setFailedMethods","permitted","setPermitted","confirmed","setConfirmed","failures","setFailures","dataFailure","err","forceNext","console","log","Date","toLocaleTimeString","currentFailures","failureTolerance","currentMethod","newMethod","find","m","includes","concat","currentFailedMethods","error","cleanupGPSData","response","latitude","lat","longitude","lon","altitude","Utility","alt","heading","track","climb","tilt","speed","accuracy","Math","max","epx","epy","altitudeAccuracy","epv","cleanupGeolocationData","location","coords","updateLocation","arguments","length","undefined","fetch","process","then","json","data","storeActions","setGPS","setTimeout","catch","getDataFromGeolocation","_navigator","_navigator$permission","navigator","permissions","query","name","permission","state","geolocation","getCurrentPosition","enableHighAccuracy","useEffect","Confirm","className","settings","useSelector","selectSettingState","gps","selectGPSState","time","setTime","run","setRun","start","end","topSpeed","to60","times","speeds","getCurrentSpeed","String","floor","padStart","units"],"sourceRoot":""}